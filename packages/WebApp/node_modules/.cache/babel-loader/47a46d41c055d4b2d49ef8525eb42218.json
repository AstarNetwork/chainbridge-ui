{"ast":null,"code":"var _jsxFileName = \"/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Modules/TransactionModal.tsx\";\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@imploy/common-themes\";\nimport CustomDrawer from \"../Components/Custom/CustomDrawer\";\nimport { Button, Typography } from \"@imploy/common-components\";\nconst useStyles = makeStyles(() => createStyles({\n  root: {}\n}));\n\nconst TransactionModal = ({\n  open\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(CustomDrawer, {\n    open: open,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"Pre-flight check\"), /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"Please be advised this is an experimental application:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"You will not be able to cancel the transaction once you submit it.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Your transaction could get stuck for an indefinite amount of time\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Funds cannot be returned if they are sent to the wrong address.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"The transaction fee may be higher than expected.\")), /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"I agree and want to send 0.25 ETH from 0xDC6fFC3f404D9dA507735c294f023373079D2B8b on Ethereum to 0xE6D5C52Cf47B7cDD4b3443D046AB16D249149219 on Celo.\"), /*#__PURE__*/React.createElement(Button, {\n    fullsize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Start Transfer\"), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Back\"));\n};\n\nexport default TransactionModal;","map":{"version":3,"sources":["/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Modules/TransactionModal.tsx"],"names":["React","makeStyles","createStyles","CustomDrawer","Button","Typography","useStyles","root","TransactionModal","open","classes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,uBAAzC;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,2BAAnC;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC,MAC3BC,YAAY,CAAC;AACXK,EAAAA,IAAI,EAAE;AADK,CAAD,CADc,CAA5B;;AAWA,MAAMC,gBAAkD,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACvE,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AAEA,sBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEG,IAApB;AAA0B,IAAA,SAAS,EAAEC,OAAO,CAACH,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDARF,CAPF,eAiBE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4JAjBF,eAsBE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtBF,eAuBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF,CADF;AA2BD,CA9BD;;AAgCA,eAAeC,gBAAf","sourcesContent":["import React from \"react\";\n\nimport { makeStyles, createStyles } from \"@imploy/common-themes\";\nimport CustomDrawer from \"../Components/Custom/CustomDrawer\";\nimport { Button, Typography } from \"@imploy/common-components\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {},\n  })\n);\n\ninterface ITransactionModalProps {\n  open: boolean\n  close: () => void\n}\n\nconst TransactionModal: React.FC<ITransactionModalProps> = ({ open }) => {\n  const classes = useStyles();\n\n  return (\n    <CustomDrawer open={open} className={classes.root}>\n      <Typography variant=\"h5\" component=\"h2\">\n        Pre-flight check\n      </Typography>\n      <Typography component=\"p\">\n        Please be advised this is an experimental application:\n      </Typography>\n      <ul>\n        <li>\n          You will not be able to cancel the transaction once you submit it.\n        </li>\n        <li>\n          Your transaction could get stuck for an indefinite amount of time\n        </li>\n        <li>Funds cannot be returned if they are sent to the wrong address.</li>\n        <li>The transaction fee may be higher than expected.</li>\n      </ul>\n      <Typography component=\"p\">\n        I agree and want to send 0.25 ETH from\n        0xDC6fFC3f404D9dA507735c294f023373079D2B8b on Ethereum to\n        0xE6D5C52Cf47B7cDD4b3443D046AB16D249149219 on Celo.\n      </Typography>\n      <Button fullsize>Start Transfer</Button>\n      <Button>Back</Button>\n    </CustomDrawer>\n  );\n};\n\nexport default TransactionModal;\n"]},"metadata":{},"sourceType":"module"}
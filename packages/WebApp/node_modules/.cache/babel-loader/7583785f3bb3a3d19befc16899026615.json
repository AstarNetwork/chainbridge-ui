{"ast":null,"code":"// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64];\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\n\nconst decResLengths = {\n  finalizePair: 0,\n  // Only contains the pubkey\n  getAddresses: 10 * ADDR_STR_LEN,\n  // 10x 129 byte strings (128 bytes + null terminator)\n  sign: 1090,\n  // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n  getWallets: 142,\n  // 71 bytes per wallet record (response contains internal and external)\n  test: 1646 // Max size of test response payload\n\n}; // Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\n\nconst DES_RES_EXTRADATA_LEN = 69; // Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\n\nconst ENC_MSG_METADATA_LEN = 13;\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN; // Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\n\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach(k => {\n  if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN) ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n});\nconst deviceCodes = {\n  'CONNECT': 1,\n  'ENCRYPTED_REQUEST': 2\n};\nconst encReqCodes = {\n  'FINALIZE_PAIRING': 0x00,\n  'GET_ADDRESSES': 0x01,\n  'ADD_PERMISSION': 0x02,\n  'SIGN_TRANSACTION': 0x03,\n  'GET_WALLETS': 0x04,\n  'TEST': 0x05\n};\nconst messageConstants = {\n  'NOT_PAIRED': 0x00,\n  'PAIRED': 0x01\n};\nconst addressSizes = {\n  'BTC': 20,\n  // 20 byte pubkeyhash\n  'ETH': 20 // 20 byte address not including 0x prefix\n\n};\nconst responseCodes = {\n  RESP_SUCCESS: 0x00,\n  RESP_ERR_INVALID_MSG: 0x80,\n  RESP_ERR_UNSUPPORTED_VER: 0x81,\n  RESP_ERR_DEV_BUSY: 0x82,\n  RESP_ERR_USER_TIMEOUT: 0x83,\n  RESP_ERR_USER_DECLINED: 0x84,\n  RESP_ERR_PAIR_FAIL: 0x85,\n  RESP_ERR_PAIR_DISABLED: 0x86,\n  RESP_ERR_PERMISSION_DISABLED: 0x87,\n  RESP_ERR_INTERNAL: 0x88,\n  RESP_ERR_GCE_TIMEOUT: 0x89,\n  RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n  RESP_ERR_DEV_LOCKED: 0x8b,\n  RESP_ERR_DISABLED: 0x8c\n};\nconst responseMsgs = {\n  [responseCodes.RESP_SUCCESS]: 0x00,\n  [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n  [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n  [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n  [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n  [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n  [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n  [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n  [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n  [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n  [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n  [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n  [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n  [responseCodes.RESP_ERR_DISABLED]: 'Disabled'\n};\nconst signingSchema = {\n  BTC_TRANSFER: 0,\n  ETH_TRANSFER: 1,\n  ERC20_TRANSFER: 2,\n  ETH_MSG: 3\n};\nconst ethMsgProtocol = {\n  SIGN_PERSONAL: 0\n};\nconst ETH_DATA_MAX_SIZE = 1024; // Maximum number of bytes that can go in the data field\n\nconst ETH_MSG_MAX_SIZE = 1024; // Maximum number of bytes that can be used in a message signing request\n\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\n\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\n\nconst BASE_URL = 'https://signing.gridpl.us';\nmodule.exports = {\n  ADDR_STR_LEN,\n  AES_IV,\n  BASE_URL,\n  ENC_MSG_LEN,\n  addressSizes,\n  decResLengths,\n  deviceCodes,\n  encReqCodes,\n  ethMsgProtocol,\n  messageConstants,\n  responseCodes,\n  responseMsgs,\n  signingSchema,\n  ETH_DATA_MAX_SIZE,\n  ETH_MSG_MAX_SIZE,\n  REQUEST_TYPE_BYTE,\n  VERSION_BYTE,\n  HARDENED_OFFSET\n};","map":{"version":3,"sources":["/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/node_modules/gridplus-sdk/src/constants.js"],"names":["AES_IV","ADDR_STR_LEN","decResLengths","finalizePair","getAddresses","sign","getWallets","test","DES_RES_EXTRADATA_LEN","ENC_MSG_METADATA_LEN","ENC_MSG_EXTRA_LEN","ENC_MSG_LEN","Object","keys","forEach","k","deviceCodes","encReqCodes","messageConstants","addressSizes","responseCodes","RESP_SUCCESS","RESP_ERR_INVALID_MSG","RESP_ERR_UNSUPPORTED_VER","RESP_ERR_DEV_BUSY","RESP_ERR_USER_TIMEOUT","RESP_ERR_USER_DECLINED","RESP_ERR_PAIR_FAIL","RESP_ERR_PAIR_DISABLED","RESP_ERR_PERMISSION_DISABLED","RESP_ERR_INTERNAL","RESP_ERR_GCE_TIMEOUT","RESP_ERR_WALLET_NOT_PRESENT","RESP_ERR_DEV_LOCKED","RESP_ERR_DISABLED","responseMsgs","signingSchema","BTC_TRANSFER","ETH_TRANSFER","ERC20_TRANSFER","ETH_MSG","ethMsgProtocol","SIGN_PERSONAL","ETH_DATA_MAX_SIZE","ETH_MSG_MAX_SIZE","REQUEST_TYPE_BYTE","VERSION_BYTE","HARDENED_OFFSET","BASE_URL","module","exports"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,IAArF,EAA2F,IAA3F,CAAf;AAEA,MAAMC,YAAY,GAAG,GAArB,C,CAA0B;AAE1B;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,YAAY,EAAE,CADI;AACkB;AACpCC,EAAAA,YAAY,EAAE,KAAKH,YAFD;AAEkB;AACpCI,EAAAA,IAAI,EAAE,IAHY;AAGkB;AACpCC,EAAAA,UAAU,EAAE,GAJM;AAIkB;AACpCC,EAAAA,IAAI,EAAE,IALY,CAKkB;;AALlB,CAAtB,C,CAQA;AACA;;AACA,MAAMC,qBAAqB,GAAG,EAA9B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,EAA7B;AAEA,MAAMC,iBAAiB,GAAGF,qBAAqB,GAAGC,oBAAlD,C,CACA;AACA;AACA;;AACA,IAAIE,WAAW,GAAG,CAAlB;AACAC,MAAM,CAACC,IAAP,CAAYX,aAAZ,EAA2BY,OAA3B,CAAoCC,CAAD,IAAO;AACtC,MAAIb,aAAa,CAACa,CAAD,CAAb,GAAmBL,iBAAnB,GAAuCC,WAA3C,EACIA,WAAW,GAAGT,aAAa,CAACa,CAAD,CAAb,GAAmBL,iBAAjC;AACP,CAHD;AAKA,MAAMM,WAAW,GAAG;AAChB,aAAW,CADK;AAEhB,uBAAqB;AAFL,CAApB;AAKA,MAAMC,WAAW,GAAG;AAChB,sBAAoB,IADJ;AAEhB,mBAAiB,IAFD;AAGhB,oBAAkB,IAHF;AAIhB,sBAAoB,IAJJ;AAKhB,iBAAe,IALC;AAMhB,UAAQ;AANQ,CAApB;AASA,MAAMC,gBAAgB,GAAG;AACrB,gBAAc,IADO;AAErB,YAAU;AAFW,CAAzB;AAKA,MAAMC,YAAY,GAAG;AACjB,SAAO,EADU;AACL;AACZ,SAAO,EAFU,CAEL;;AAFK,CAArB;AAKA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,YAAY,EAAE,IADI;AAElBC,EAAAA,oBAAoB,EAAE,IAFJ;AAGlBC,EAAAA,wBAAwB,EAAE,IAHR;AAIlBC,EAAAA,iBAAiB,EAAE,IAJD;AAKlBC,EAAAA,qBAAqB,EAAE,IALL;AAMlBC,EAAAA,sBAAsB,EAAE,IANN;AAOlBC,EAAAA,kBAAkB,EAAE,IAPF;AAQlBC,EAAAA,sBAAsB,EAAE,IARN;AASlBC,EAAAA,4BAA4B,EAAE,IATZ;AAUlBC,EAAAA,iBAAiB,EAAE,IAVD;AAWlBC,EAAAA,oBAAoB,EAAE,IAXJ;AAYlBC,EAAAA,2BAA2B,EAAE,IAZX;AAalBC,EAAAA,mBAAmB,EAAE,IAbH;AAclBC,EAAAA,iBAAiB,EAAE;AAdD,CAAtB;AAiBA,MAAMC,YAAY,GAAG;AACjB,GAACf,aAAa,CAACC,YAAf,GAA8B,IADb;AAEjB,GAACD,aAAa,CAACE,oBAAf,GAAsC,iBAFrB;AAGjB,GAACF,aAAa,CAACG,wBAAf,GAA0C,qBAHzB;AAIjB,GAACH,aAAa,CAACI,iBAAf,GAAmC,aAJlB;AAKjB,GAACJ,aAAa,CAACK,qBAAf,GAAuC,0BALtB;AAMjB,GAACL,aAAa,CAACM,sBAAf,GAAwC,0BANvB;AAOjB,GAACN,aAAa,CAACO,kBAAf,GAAoC,gBAPnB;AAQjB,GAACP,aAAa,CAACQ,sBAAf,GAAwC,+BARvB;AASjB,GAACR,aAAa,CAACS,4BAAf,GAA8C,yCAT7B;AAUjB,GAACT,aAAa,CAACU,iBAAf,GAAmC,cAVlB;AAWjB,GAACV,aAAa,CAACW,oBAAf,GAAsC,SAXrB;AAYjB,GAACX,aAAa,CAACY,2BAAf,GAA6C,+BAZ5B;AAajB,GAACZ,aAAa,CAACa,mBAAf,GAAqC,eAbpB;AAcjB,GAACb,aAAa,CAACc,iBAAf,GAAmC;AAdlB,CAArB;AAkBA,MAAME,aAAa,GAAG;AAClBC,EAAAA,YAAY,EAAE,CADI;AAElBC,EAAAA,YAAY,EAAE,CAFI;AAGlBC,EAAAA,cAAc,EAAE,CAHE;AAIlBC,EAAAA,OAAO,EAAE;AAJS,CAAtB;AAOA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAAvB;AAIA,MAAMC,iBAAiB,GAAG,IAA1B,C,CAAgC;;AAChC,MAAMC,gBAAgB,GAAG,IAAzB,C,CAA+B;;AAC/B,MAAMC,iBAAiB,GAAG,IAA1B,C,CAAgC;;AAChC,MAAMC,YAAY,GAAG,CAArB;AACA,MAAMC,eAAe,GAAG,UAAxB,C,CAAoC;;AAEpC,MAAMC,QAAQ,GAAG,2BAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbjD,EAAAA,YADa;AAEbD,EAAAA,MAFa;AAGbgD,EAAAA,QAHa;AAIbrC,EAAAA,WAJa;AAKbQ,EAAAA,YALa;AAMbjB,EAAAA,aANa;AAObc,EAAAA,WAPa;AAQbC,EAAAA,WARa;AASbwB,EAAAA,cATa;AAUbvB,EAAAA,gBAVa;AAWbE,EAAAA,aAXa;AAYbe,EAAAA,YAZa;AAabC,EAAAA,aAba;AAcbO,EAAAA,iBAda;AAebC,EAAAA,gBAfa;AAgBbC,EAAAA,iBAhBa;AAiBbC,EAAAA,YAjBa;AAkBbC,EAAAA;AAlBa,CAAjB","sourcesContent":["// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]\n\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\nconst decResLengths = {\n    finalizePair: 0,                    // Only contains the pubkey\n    getAddresses: 10 * ADDR_STR_LEN,    // 10x 129 byte strings (128 bytes + null terminator)\n    sign: 1090,                         // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n    getWallets: 142,                    // 71 bytes per wallet record (response contains internal and external)\n    test: 1646                          // Max size of test response payload\n}\n\n// Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\nconst DES_RES_EXTRADATA_LEN = 69; \n\n// Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\nconst ENC_MSG_METADATA_LEN = 13;\n\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN;\n// Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach((k) => {\n    if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN)\n        ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n})\n  \nconst deviceCodes = {\n    'CONNECT': 1,\n    'ENCRYPTED_REQUEST': 2,\n}\n\nconst encReqCodes = {\n    'FINALIZE_PAIRING': 0x00,\n    'GET_ADDRESSES': 0x01,\n    'ADD_PERMISSION': 0x02,\n    'SIGN_TRANSACTION': 0x03,\n    'GET_WALLETS': 0x04,\n    'TEST': 0x05,\n}\n\nconst messageConstants = {\n    'NOT_PAIRED': 0x00,\n    'PAIRED': 0x01,\n}\n\nconst addressSizes = {\n    'BTC': 20,  // 20 byte pubkeyhash\n    'ETH': 20,  // 20 byte address not including 0x prefix\n}\n  \nconst responseCodes = {\n    RESP_SUCCESS: 0x00,\n    RESP_ERR_INVALID_MSG: 0x80,\n    RESP_ERR_UNSUPPORTED_VER: 0x81,\n    RESP_ERR_DEV_BUSY: 0x82,\n    RESP_ERR_USER_TIMEOUT: 0x83,\n    RESP_ERR_USER_DECLINED: 0x84,\n    RESP_ERR_PAIR_FAIL: 0x85,\n    RESP_ERR_PAIR_DISABLED: 0x86,\n    RESP_ERR_PERMISSION_DISABLED: 0x87,\n    RESP_ERR_INTERNAL: 0x88,\n    RESP_ERR_GCE_TIMEOUT: 0x89,\n    RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n    RESP_ERR_DEV_LOCKED: 0x8b,\n    RESP_ERR_DISABLED: 0x8c\n}\n\nconst responseMsgs = {\n    [responseCodes.RESP_SUCCESS]: 0x00,\n    [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n    [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n    [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n    [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n    [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n    [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n    [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n    [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n    [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n    [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n    [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n    [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n    [responseCodes.RESP_ERR_DISABLED]: 'Disabled',\n}\n \n\nconst signingSchema = {\n    BTC_TRANSFER: 0,\n    ETH_TRANSFER: 1,\n    ERC20_TRANSFER: 2,\n    ETH_MSG: 3,\n}\n\nconst ethMsgProtocol = {\n    SIGN_PERSONAL: 0,\n}\n\nconst ETH_DATA_MAX_SIZE = 1024; // Maximum number of bytes that can go in the data field\nconst ETH_MSG_MAX_SIZE = 1024; // Maximum number of bytes that can be used in a message signing request\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\n\nconst BASE_URL = 'https://signing.gridpl.us';\n\nmodule.exports = {\n    ADDR_STR_LEN,\n    AES_IV,\n    BASE_URL,\n    ENC_MSG_LEN,\n    addressSizes,\n    decResLengths,\n    deviceCodes,\n    encReqCodes,\n    ethMsgProtocol,\n    messageConstants,\n    responseCodes,\n    responseMsgs,\n    signingSchema,\n    ETH_DATA_MAX_SIZE,\n    ETH_MSG_MAX_SIZE,\n    REQUEST_TYPE_BYTE,\n    VERSION_BYTE,\n    HARDENED_OFFSET,\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Components/Custom/AddressInput.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { makeStyles, createStyles } from \"@imploy/common-themes\";\nimport { CheckboxInput, TextInput } from \"@imploy/common-components\";\nimport clsx from \"clsx\";\nimport { useField } from \"formik\";\nconst useStyles = makeStyles(({\n  constants\n}) => createStyles({\n  root: {},\n  input: {\n    margin: 0,\n    width: \"100%\"\n  },\n  label: {\n    marginBottom: constants.generalUnit\n  },\n  checkbox: {\n    marginTop: constants.generalUnit * 3\n  }\n}));\n\nconst AddressInput = ({\n  classNames,\n  senderAddress,\n  className,\n  inputVariant = \"default\",\n  type = \"text\",\n  placeholder,\n  name,\n  size,\n  label,\n  labelClassName,\n  captionMessage,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [field, meta, helpers] = useField(name);\n  const [stored, setStored] = useState();\n  const toggleReceiver = useCallback(() => {\n    if (stored === \"\") {\n      setStored(field.value);\n      helpers.setValue(senderAddress);\n    } else {\n      helpers.setValue(stored);\n      setStored(\"\");\n    }\n  }, [helpers, field, senderAddress, stored, setStored]);\n  useEffect(() => {\n    // Used to ensure value if address changes for some reason\n    if (stored !== \"\" && stored !== senderAddress) {\n      setStored(senderAddress);\n    }\n  }, [senderAddress, stored]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, Object.assign({\n    label: label ? label : field.name,\n    inputVariant: inputVariant,\n    disabled: stored !== \"\",\n    type: type,\n    size: size,\n    className: clsx(classNames === null || classNames === void 0 ? void 0 : classNames.input, classes.input),\n    labelClassName: clsx(labelClassName, classes.label),\n    name: field.name,\n    value: field.value,\n    placeholder: placeholder,\n    captionMessage: meta.error ? `${meta.error}` : captionMessage && captionMessage,\n    state: meta.error ? \"error\" : undefined,\n    onChange: e => {\n      var _e$target;\n\n      helpers.setValue((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value);\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxInput, {\n    label: \"I want to send funds to my address\",\n    value: stored !== \"\",\n    onChange: () => toggleReceiver(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AddressInput;","map":{"version":3,"sources":["/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Components/Custom/AddressInput.tsx"],"names":["React","useCallback","useEffect","useState","makeStyles","createStyles","CheckboxInput","TextInput","clsx","useField","useStyles","constants","root","input","margin","width","label","marginBottom","generalUnit","checkbox","marginTop","AddressInput","classNames","senderAddress","className","inputVariant","type","placeholder","name","size","labelClassName","captionMessage","rest","classes","field","meta","helpers","stored","setStored","toggleReceiver","value","setValue","error","undefined","e","target"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useCallback, useEffect, useState } from \"react\";\n\nimport { makeStyles, createStyles, ITheme } from \"@imploy/common-themes\";\nimport {\n  CheckboxInput,\n  FormikTextInputProps,\n  TextInput,\n} from \"@imploy/common-components\";\nimport clsx from \"clsx\";\nimport { useField } from \"formik\";\n\nconst useStyles = makeStyles(({ constants }: ITheme) =>\n  createStyles({\n    root: {},\n    input: {\n      margin: 0,\n      width: \"100%\",\n    },\n    label: {\n      marginBottom: constants.generalUnit,\n    },\n    checkbox: {\n      marginTop: constants.generalUnit * 3,\n    },\n  })\n);\n\ninterface IAddressInput extends FormikTextInputProps {\n  senderAddress: string;\n  classNames?: {\n    input?: string;\n  };\n}\n\nconst AddressInput: React.FC<IAddressInput> = ({\n  classNames,\n  senderAddress,\n  className,\n  inputVariant = \"default\",\n  type = \"text\",\n  placeholder,\n  name,\n  size,\n  label,\n  labelClassName,\n  captionMessage,\n  ...rest\n}: IAddressInput) => {\n  const classes = useStyles();\n  const [field, meta, helpers] = useField(name);\n\n  const [stored, setStored] = useState<string | undefined>();\n\n  const toggleReceiver = useCallback(() => {\n    if (stored === \"\") {\n      setStored(field.value);\n      helpers.setValue(senderAddress);\n    } else {\n      helpers.setValue(stored);\n      setStored(\"\");\n    }\n  }, [helpers, field, senderAddress, stored, setStored]);\n\n  useEffect(() => {\n    // Used to ensure value if address changes for some reason\n    if (stored !== \"\" && stored !== senderAddress) {\n      setStored(senderAddress);\n    }\n  }, [senderAddress, stored]);\n\n  return (\n    <section className={clsx(classes.root, className)}>\n      <div>\n        <TextInput\n          label={label ? label : field.name}\n          inputVariant={inputVariant}\n          disabled={stored !== \"\"}\n          type={type}\n          size={size}\n          className={clsx(classNames?.input, classes.input)}\n          labelClassName={clsx(labelClassName, classes.label)}\n          name={field.name}\n          value={field.value}\n          placeholder={placeholder}\n          captionMessage={\n            meta.error ? `${meta.error}` : captionMessage && captionMessage\n          }\n          state={meta.error ? \"error\" : undefined}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            helpers.setValue(e.target?.value);\n          }}\n          {...rest}\n        />\n      </div>\n      <div className={classes.checkbox}>\n        <CheckboxInput\n          label=\"I want to send funds to my address\"\n          value={stored !== \"\"}\n          onChange={() => toggleReceiver()}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default AddressInput;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Contexts/ChainbridgeContext.tsx\";\nimport { useWeb3 } from \"@chainsafe/web3-context\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { BridgeFactory } from \"@chainsafe/chainbridge-contracts\";\nimport { BigNumber, ethers, utils } from \"ethers\";\nimport { Erc20DetailedFactory } from \"../Contracts/Erc20DetailedFactory\";\nconst chains = [{\n  chainId: 1,\n  networkId: 5,\n  name: \"Ethereum - Goerli\",\n  bridgeAddress: \"0x2524d71D163f60747630c4EBeB077a9832329646\",\n  erc20HandlerAddress: \"0xDc26320258ADfd806d125223Fb0F94e54D13FA51\",\n  rpcUrl: \"https://goerli.prylabs.net\",\n  type: \"Ethereum\",\n  tokenAddresses: [\"0x14dD060dB55c0E7cc072BD3ab4709d55583119c0\"]\n}, {\n  chainId: 2,\n  networkId: 6,\n  name: \"Ethereum Classic - Kotti\",\n  bridgeAddress: \"0x2524d71D163f60747630c4EBeB077a9832329646\",\n  erc20HandlerAddress: \"0xDc26320258ADfd806d125223Fb0F94e54D13FA51\",\n  rpcUrl: \"https://www.ethercluster.com/kotti\",\n  type: \"Ethereum\",\n  tokenAddresses: [\"0x14dD060dB55c0E7cc072BD3ab4709d55583119c0\"]\n}];\nconst ChainbridgeContext = React.createContext(undefined);\nconst ERC20ResourceId = \"0x000000000000000000000014dD060dB55c0E7cc072BD3ab4709d55583119c001\";\n\nconst ChainbridgeProvider = ({\n  children\n}) => {\n  const {\n    isReady,\n    network,\n    provider\n  } = useWeb3();\n  const [homeChain, setHomeChain] = useState();\n  const [relayerThreshold, setRelayerThreshold] = useState(undefined);\n  const [destinationChain, setDestinationChain] = useState();\n  const [destinationChains, setDestinationChains] = useState([]);\n  const [homeBridge, setHomeBridge] = useState(undefined);\n  const [destinationBridge, setDestinationBridge] = useState(undefined);\n  const [transactionStatus, setTransactionStatus] = useState(undefined);\n  const [depositNonce, setDepositNonce] = useState(undefined);\n  const [depositVotes, setDepositVotes] = useState(0);\n  const [inTransitMessages, setInTransitMessages] = useState([]);\n  const [depositAmount, setDepositAmount] = useState();\n\n  const resetDeposit = () => {\n    setDestinationChain(undefined);\n    setTransactionStatus(undefined);\n    setDepositNonce(undefined);\n    setDepositVotes(0);\n    setDepositAmount(undefined);\n    setInTransitMessages([]);\n  };\n\n  useEffect(() => {\n    if (network && isReady) {\n      const home = chains.find(c => c.networkId === network);\n\n      if (!home) {\n        return;\n      }\n\n      setHomeChain(home);\n      const signer = provider === null || provider === void 0 ? void 0 : provider.getSigner();\n\n      if (!signer) {\n        console.log(\"No signer\");\n        return;\n      }\n\n      const bridge = BridgeFactory.connect(home.bridgeAddress, signer);\n      setHomeBridge(bridge);\n      setDestinationChains(chains.filter(c => c.networkId !== network));\n    } else {\n      setHomeChain(undefined);\n    }\n  }, [isReady, network, provider]);\n  useEffect(() => {\n    const getRelayerThreshold = async () => {\n      if (homeBridge) {\n        const threshold = BigNumber.from(await (homeBridge === null || homeBridge === void 0 ? void 0 : homeBridge._relayerThreshold())).toNumber();\n        setRelayerThreshold(threshold);\n      }\n    };\n\n    getRelayerThreshold();\n  }, [homeBridge]);\n  useEffect(() => {\n    if (homeChain && destinationBridge && depositNonce) {\n      destinationBridge.on(destinationBridge.filters.ProposalEvent(homeChain.chainId, BigNumber.from(depositNonce), null, null, null), (originChainId, depositNonce, status) => {\n        switch (BigNumber.from(status).toNumber()) {\n          case 1:\n            setInTransitMessages(inTransitMessages.concat(`Proposal created on ${destinationChain === null || destinationChain === void 0 ? void 0 : destinationChain.name}`));\n            break;\n\n          case 2:\n            setInTransitMessages(inTransitMessages.concat(`Proposal has passed. Executing...`));\n            break;\n\n          case 3:\n            setTransactionStatus(\"Transfer Completed\");\n            break;\n\n          case 4:\n            setTransactionStatus(\"Transfer Aborted\");\n            break;\n        }\n      });\n      destinationBridge.on(destinationBridge.filters.ProposalVote(homeChain.chainId, BigNumber.from(depositNonce), null, null), (originChainId, depositNonce, status, resourceId, tx) => {\n        // TODO: Ensure that no event is emitted for NO votes.\n        setDepositVotes(depositVotes + 1); // TODO: Improve these messages including the TX Hash\n\n        console.log(tx);\n        setInTransitMessages(inTransitMessages.concat(`Vote cast`));\n      });\n    }\n\n    return () => {\n      //@ts-ignore\n      destinationBridge === null || destinationBridge === void 0 ? void 0 : destinationBridge.removeAllListeners();\n    };\n  }, [depositNonce, homeChain, destinationBridge, depositVotes, destinationChain, inTransitMessages]);\n\n  const handleSetDestination = chainId => {\n    const chain = destinationChains.find(c => c.chainId === chainId);\n\n    if (!chain) {\n      throw new Error(\"Invalid destination chain selected\");\n    }\n\n    setDestinationChain(chain);\n    const provider = new ethers.providers.JsonRpcProvider(chain.rpcUrl);\n    const bridge = BridgeFactory.connect(chain.bridgeAddress, provider);\n    setDestinationBridge(bridge);\n  };\n\n  const deposit = async (amount, recipient, tokenAddress) => {\n    if (!homeBridge || !homeChain) {\n      console.log(\"Home bridge contract is not instantiated\");\n      return;\n    }\n\n    if (!destinationChain || !destinationBridge) {\n      console.log(\"Destination bridge contract is not instantiated\");\n      return;\n    }\n\n    const signer = provider === null || provider === void 0 ? void 0 : provider.getSigner();\n\n    if (!signer) {\n      console.log(\"No signer\");\n      return;\n    }\n\n    setTransactionStatus(\"Initializing Transfer\");\n    setDepositAmount(amount);\n    const erc20 = Erc20DetailedFactory.connect(tokenAddress, signer);\n    const data = \"0x\" + utils.hexZeroPad( // TODO Wire up dynamic token decimals\n    BigNumber.from(utils.parseUnits(amount.toString(), 18)).toHexString(), 32).substr(2) + // Deposit Amount (32 bytes)\n    utils.hexZeroPad(utils.hexlify((recipient.length - 2) / 2), 32).substr(2) + // len(recipientAddress) (32 bytes)\n    recipient.substr(2); // recipientAddress (?? bytes)\n\n    try {\n      await (await erc20.approve(homeChain.erc20HandlerAddress, BigNumber.from(utils.parseUnits(amount.toString(), 18)))).wait(1);\n      homeBridge.once(homeBridge.filters.Deposit(destinationChain.chainId, ERC20ResourceId, null), (destChainId, resourceId, depositNonce) => {\n        setDepositNonce(`${depositNonce.toString()}`);\n        setTransactionStatus(\"In Transit\");\n      });\n      await (await homeBridge.deposit(destinationChain.chainId, ERC20ResourceId, data)).wait();\n      return Promise.resolve();\n    } catch (error) {\n      console.log(error);\n      setTransactionStatus(\"Transfer Aborted\");\n      return Promise.reject();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ChainbridgeContext.Provider, {\n    value: {\n      homeChain: homeChain,\n      destinationChain: destinationChain,\n      destinationChains: destinationChains.map(c => ({\n        chainId: c.chainId,\n        name: c.name\n      })),\n      setDestinationChain: handleSetDestination,\n      deposit,\n      resetDeposit,\n      depositVotes,\n      relayerThreshold: relayerThreshold,\n      depositNonce,\n      transactionStatus,\n      inTransitMessages,\n      depositAmount\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nconst useChainbridge = () => {\n  const context = useContext(ChainbridgeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useChainbridge must be called within a DriveProvider\");\n  }\n\n  return context;\n};\n\nexport { ChainbridgeProvider, useChainbridge };","map":{"version":3,"sources":["/home/ryann/Documents/Repos/ChainSafe/chainbridge-ui/packages/WebApp/src/Contexts/ChainbridgeContext.tsx"],"names":["useWeb3","React","useContext","useEffect","useState","BridgeFactory","BigNumber","ethers","utils","Erc20DetailedFactory","chains","chainId","networkId","name","bridgeAddress","erc20HandlerAddress","rpcUrl","type","tokenAddresses","ChainbridgeContext","createContext","undefined","ERC20ResourceId","ChainbridgeProvider","children","isReady","network","provider","homeChain","setHomeChain","relayerThreshold","setRelayerThreshold","destinationChain","setDestinationChain","destinationChains","setDestinationChains","homeBridge","setHomeBridge","destinationBridge","setDestinationBridge","transactionStatus","setTransactionStatus","depositNonce","setDepositNonce","depositVotes","setDepositVotes","inTransitMessages","setInTransitMessages","depositAmount","setDepositAmount","resetDeposit","home","find","c","signer","getSigner","console","log","bridge","connect","filter","getRelayerThreshold","threshold","from","_relayerThreshold","toNumber","on","filters","ProposalEvent","originChainId","status","concat","ProposalVote","resourceId","tx","removeAllListeners","handleSetDestination","chain","Error","providers","JsonRpcProvider","deposit","amount","recipient","tokenAddress","erc20","data","hexZeroPad","parseUnits","toString","toHexString","substr","hexlify","length","approve","wait","once","Deposit","destChainId","Promise","resolve","error","reject","map","useChainbridge","context"],"mappings":"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","sourcesContent":["import { useWeb3 } from \"@chainsafe/web3-context\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bridge, BridgeFactory } from \"@chainsafe/chainbridge-contracts\";\nimport { BigNumber, ethers, utils } from \"ethers\";\nimport { Erc20DetailedFactory } from \"../Contracts/Erc20DetailedFactory\";\n\ninterface IChainbridgeContextProps {\n  children: React.ReactNode | React.ReactNode[];\n}\n\ntype Chain = {\n  chainId: number;\n  networkId: number;\n  name: string;\n  bridgeAddress: string;\n  erc20HandlerAddress: string;\n  rpcUrl: string;\n  type: \"Ethereum\" | \"Substrate\";\n  tokenAddresses: string[];\n};\n\nconst chains: Chain[] = [\n  {\n    chainId: 1,\n    networkId: 5,\n    name: \"Ethereum - Goerli\",\n    bridgeAddress: \"0x2524d71D163f60747630c4EBeB077a9832329646\",\n    erc20HandlerAddress: \"0xDc26320258ADfd806d125223Fb0F94e54D13FA51\",\n    rpcUrl: \"https://goerli.prylabs.net\",\n    type: \"Ethereum\",\n    tokenAddresses: [\"0x14dD060dB55c0E7cc072BD3ab4709d55583119c0\"],\n  },\n  {\n    chainId: 2,\n    networkId: 6,\n    name: \"Ethereum Classic - Kotti\",\n    bridgeAddress: \"0x2524d71D163f60747630c4EBeB077a9832329646\",\n    erc20HandlerAddress: \"0xDc26320258ADfd806d125223Fb0F94e54D13FA51\",\n    rpcUrl: \"https://www.ethercluster.com/kotti\",\n    type: \"Ethereum\",\n    tokenAddresses: [\"0x14dD060dB55c0E7cc072BD3ab4709d55583119c0\"],\n  },\n];\n\ntype ChainbridgeContext = {\n  homeChain?: Chain;\n  destinationChain?: Chain;\n  destinationChains: Array<{ chainId: number; name: string }>;\n  setDestinationChain(chainId: number): void;\n  deposit(\n    amount: number,\n    recipient: string,\n    tokenAddress: string\n  ): Promise<void>;\n  resetDeposit(): void;\n  transactionStatus?: TransactionStatus;\n  depositVotes: number;\n  relayerThreshold?: number;\n  depositNonce?: string;\n  inTransitMessages: string[];\n  depositAmount?: number;\n};\n\ntype TransactionStatus =\n  | \"Initializing Transfer\"\n  | \"In Transit\"\n  | \"Transfer Completed\"\n  | \"Transfer Aborted\";\n\nconst ChainbridgeContext = React.createContext<ChainbridgeContext | undefined>(\n  undefined\n);\n\nconst ERC20ResourceId =\n  \"0x000000000000000000000014dD060dB55c0E7cc072BD3ab4709d55583119c001\";\n\nconst ChainbridgeProvider = ({ children }: IChainbridgeContextProps) => {\n  const { isReady, network, provider } = useWeb3();\n  const [homeChain, setHomeChain] = useState<Chain | undefined>();\n  const [relayerThreshold, setRelayerThreshold] = useState<number | undefined>(\n    undefined\n  );\n  const [destinationChain, setDestinationChain] = useState<Chain | undefined>();\n  const [destinationChains, setDestinationChains] = useState<Chain[]>([]);\n  const [homeBridge, setHomeBridge] = useState<Bridge | undefined>(undefined);\n  const [destinationBridge, setDestinationBridge] = useState<\n    Bridge | undefined\n  >(undefined);\n  const [transactionStatus, setTransactionStatus] = useState<\n    TransactionStatus | undefined\n  >(undefined);\n  const [depositNonce, setDepositNonce] = useState<string | undefined>(\n    undefined\n  );\n  const [depositVotes, setDepositVotes] = useState<number>(0);\n  const [inTransitMessages, setInTransitMessages] = useState<string[]>([]);\n  const [depositAmount, setDepositAmount] = useState<number | undefined>();\n\n  const resetDeposit = () => {\n    setDestinationChain(undefined);\n    setTransactionStatus(undefined);\n    setDepositNonce(undefined);\n    setDepositVotes(0);\n    setDepositAmount(undefined);\n    setInTransitMessages([]);\n  };\n\n  useEffect(() => {\n    if (network && isReady) {\n      const home = chains.find((c) => c.networkId === network);\n      if (!home) {\n        return;\n      }\n      setHomeChain(home);\n\n      const signer = provider?.getSigner();\n      if (!signer) {\n        console.log(\"No signer\");\n        return;\n      }\n\n      const bridge = BridgeFactory.connect(home.bridgeAddress, signer);\n      setHomeBridge(bridge);\n      setDestinationChains(chains.filter((c) => c.networkId !== network));\n    } else {\n      setHomeChain(undefined);\n    }\n  }, [isReady, network, provider]);\n\n  useEffect(() => {\n    const getRelayerThreshold = async () => {\n      if (homeBridge) {\n        const threshold = BigNumber.from(\n          await homeBridge?._relayerThreshold()\n        ).toNumber();\n        setRelayerThreshold(threshold);\n      }\n    };\n    getRelayerThreshold();\n  }, [homeBridge]);\n\n  useEffect(() => {\n    if (homeChain && destinationBridge && depositNonce) {\n      destinationBridge.on(\n        destinationBridge.filters.ProposalEvent(\n          homeChain.chainId,\n          BigNumber.from(depositNonce),\n          null,\n          null,\n          null\n        ),\n        (originChainId, depositNonce, status) => {\n          switch (BigNumber.from(status).toNumber()) {\n            case 1:\n              setInTransitMessages(\n                inTransitMessages.concat(\n                  `Proposal created on ${destinationChain?.name}`\n                )\n              );\n              break;\n            case 2:\n              setInTransitMessages(\n                inTransitMessages.concat(`Proposal has passed. Executing...`)\n              );\n              break;\n            case 3:\n              setTransactionStatus(\"Transfer Completed\");\n              break;\n            case 4:\n              setTransactionStatus(\"Transfer Aborted\");\n              break;\n          }\n        }\n      );\n\n      destinationBridge.on(\n        destinationBridge.filters.ProposalVote(\n          homeChain.chainId,\n          BigNumber.from(depositNonce),\n          null,\n          null\n        ),\n        (originChainId, depositNonce, status, resourceId, tx) => {\n          // TODO: Ensure that no event is emitted for NO votes.\n          setDepositVotes(depositVotes + 1);\n          // TODO: Improve these messages including the TX Hash\n          console.log(tx);\n          setInTransitMessages(inTransitMessages.concat(`Vote cast`));\n        }\n      );\n    }\n    return () => {\n      //@ts-ignore\n      destinationBridge?.removeAllListeners();\n    };\n  }, [\n    depositNonce,\n    homeChain,\n    destinationBridge,\n    depositVotes,\n    destinationChain,\n    inTransitMessages,\n  ]);\n\n  const handleSetDestination = (chainId: number) => {\n    const chain = destinationChains.find((c) => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Invalid destination chain selected\");\n    }\n    setDestinationChain(chain);\n    const provider = new ethers.providers.JsonRpcProvider(chain.rpcUrl);\n    const bridge = BridgeFactory.connect(chain.bridgeAddress, provider);\n    setDestinationBridge(bridge);\n  };\n\n  const deposit = async (\n    amount: number,\n    recipient: string,\n    tokenAddress: string\n  ) => {\n    if (!homeBridge || !homeChain) {\n      console.log(\"Home bridge contract is not instantiated\");\n      return;\n    }\n\n    if (!destinationChain || !destinationBridge) {\n      console.log(\"Destination bridge contract is not instantiated\");\n      return;\n    }\n\n    const signer = provider?.getSigner();\n    if (!signer) {\n      console.log(\"No signer\");\n      return;\n    }\n\n    setTransactionStatus(\"Initializing Transfer\");\n    setDepositAmount(amount);\n\n    const erc20 = Erc20DetailedFactory.connect(tokenAddress, signer);\n\n    const data =\n      \"0x\" +\n      utils\n        .hexZeroPad(\n          // TODO Wire up dynamic token decimals\n          BigNumber.from(utils.parseUnits(amount.toString(), 18)).toHexString(),\n          32\n        )\n        .substr(2) + // Deposit Amount (32 bytes)\n      utils\n        .hexZeroPad(utils.hexlify((recipient.length - 2) / 2), 32)\n        .substr(2) + // len(recipientAddress) (32 bytes)\n      recipient.substr(2); // recipientAddress (?? bytes)\n\n    try {\n      await (\n        await erc20.approve(\n          homeChain.erc20HandlerAddress,\n          BigNumber.from(utils.parseUnits(amount.toString(), 18))\n        )\n      ).wait(1);\n\n      homeBridge.once(\n        homeBridge.filters.Deposit(\n          destinationChain.chainId,\n          ERC20ResourceId,\n          null\n        ),\n        (destChainId, resourceId, depositNonce) => {\n          setDepositNonce(`${depositNonce.toString()}`);\n          setTransactionStatus(\"In Transit\");\n        }\n      );\n\n      await (\n        await homeBridge.deposit(\n          destinationChain.chainId,\n          ERC20ResourceId,\n          data\n        )\n      ).wait();\n      return Promise.resolve();\n    } catch (error) {\n      console.log(error);\n      setTransactionStatus(\"Transfer Aborted\");\n      return Promise.reject();\n    }\n  };\n\n  return (\n    <ChainbridgeContext.Provider\n      value={{\n        homeChain: homeChain,\n        destinationChain: destinationChain,\n        destinationChains: destinationChains.map((c) => ({\n          chainId: c.chainId,\n          name: c.name,\n        })),\n        setDestinationChain: handleSetDestination,\n        deposit,\n        resetDeposit,\n        depositVotes,\n        relayerThreshold: relayerThreshold,\n        depositNonce,\n        transactionStatus,\n        inTransitMessages,\n        depositAmount,\n      }}\n    >\n      {children}\n    </ChainbridgeContext.Provider>\n  );\n};\n\nconst useChainbridge = () => {\n  const context = useContext(ChainbridgeContext);\n  if (context === undefined) {\n    throw new Error(\"useChainbridge must be called within a DriveProvider\");\n  }\n  return context;\n};\n\nexport { ChainbridgeProvider, useChainbridge };\n"]},"metadata":{},"sourceType":"module"}